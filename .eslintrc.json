{
  "extends": ["next/core-web-vitals"],
  "rules": {
    "prefer-const": "error",
    "no-var": "error"
  },
  "overrides": [
    {
      "files": ["**/*.ts", "**/*.tsx"],
      "excludedFiles": ["**/*.test.ts", "**/*.test.tsx"],
      "rules": {
        "no-restricted-syntax": [
          "error",
          {
            "selector": "VariableDeclaration[kind='let']",
            "message": "Use 'const' instead of 'let'. Prefer immutable variables. If you need reassignment, consider refactoring to avoid mutation."
          },
          {
            "selector": "CallExpression[callee.property.name='pop']",
            "message": "⚠️  Future: Use array.slice(0, -1) instead of pop() for immutability."
          },
          {
            "selector": "CallExpression[callee.property.name='shift']",
            "message": "⚠️  Future: Use array.slice(1) instead of shift() for immutability."
          },
          {
            "selector": "CallExpression[callee.property.name='unshift']",
            "message": "⚠️  Future: Use [newItem, ...array] instead of unshift() for immutability."
          },
          {
            "selector": "CallExpression[callee.property.name='splice']",
            "message": "⚠️  Future: Use array.slice() and spread operators instead of splice() for immutability."
          },
          {
            "selector": "CallExpression[callee.property.name='sort'][arguments.length=0]",
            "message": "⚠️  Future: Use [...array].sort() or array.toSorted() instead of mutating sort()."
          },
          {
            "selector": "CallExpression[callee.property.name='reverse']",
            "message": "⚠️  Future: Use [...array].reverse() or array.toReversed() instead of mutating reverse()."
          }
        ]
      }
    },
    {
      "files": ["**/*.test.ts", "**/*.test.tsx"],
      "rules": {
        "no-restricted-syntax": [
          "warn",
          {
            "selector": "VariableDeclaration[kind='let']",
            "message": "Consider using 'const' instead of 'let' for better immutability in tests."
          }
        ]
      }
    }
  ]
}
